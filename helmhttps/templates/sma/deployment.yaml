apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "mysma.name" . }}
  labels:
    app: {{ include "mysma.name" .  }}
    chart: {{.Chart.Name }}-{{ .Chart.Version |replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app :  {{ include "mysma.name" . }} 
      release:  {{ .Release.Name }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 33%
  minReadySeconds: 5
  template:
    metadata:
      labels:
        app : {{ include "mysma.name" . }} 
        release:  {{ .Release.Name }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/actuator/prometheus"
        prometheus.io/port: "{{ .Values.sma.config.management.server.port }}"
    spec:
      containers:
      - name: {{ .Chart.Name }}
        image: {{ .Values.sma.repository }}:{{ .Values.sma.tag }}
        imagePullPolicy: {{ .Values.sma.pullPolicy }}
        ports:
        - name: {{ .Values.sma.name | trunc 15 }}
          containerPort: {{ .Values.sma.config.server.port }}
        - name: {{ .Values.sma.name | trunc 9 }}-admin
          containerPort: {{ .Values.sma.config.management.server.port }}
        env:
          - name: SERVER_PORT
            value: "{{ .Values.sma.config.server.port }}"
          - name: MANAGEMENT_SERVER_PORT
            value: "{{ .Values.sma.config.management.server.port }}"
          - name: LOGGING_LEVEL
            value: {{ .Values.sma.config.logging.level }}
          - name: MSSQL_USER
            valueFrom:
              secretKeyRef:
                name: mysma-secret
                key: mssql-user
          - name: MSSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysma-secret
                key: mssql-password
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
          failureThreshold: 5
          initialDelaySeconds: 200
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 800
          periodSeconds: 30
        resources:
{{ toYaml .Values.sma.resources | indent 12 }}
      - name: {{ .Chart.Name }}-service
        image: {{ .Values.service.repository }}:{{ .Values.service.tag }}
        imagePullPolicy: {{ .Values.service.pullPolicy }}
        ports:
          - name: {{ .Values.service.name | trunc 15 }}
            containerPort: {{ .Values.service.port }}
          - name: {{ .Values.service.name | trunc 9 }}-admin
            containerPort: {{ .Values.service.adminPort }}
        livenessProbe:
          tcpSocket:
            port: {{ .Values.service.port }}
          initialDelaySeconds: 10
        readinessProbe:
          tcpSocket:
            port: {{ .Values.service.port }}
          initialDelaySeconds: 10
        resources:
{{ toYaml .Values.service.resources | indent 12 }}
        volumeMounts:
          - name: {{ .Values.service.name }}-config
            mountPath: /etc/envoy/
          - name: {{ .Values.service.name }}-tls
            mountPath: "/certs/"
            readOnly: true
      volumes:
        - name: {{ .Values.service.name }}-config
          configMap:
            name: {{ include "mysma.name" . }}-config
            items:
              - key: envoy.yaml
                path: envoy.yaml
        - name: {{ .Values.service.name }}-tls
          secret:
            secretName: {{ include "mysma.name" . }}-tls
